import org.apache.commons.lang3.math.NumberUtils
import org.apache.commons.lang3.StringUtils


private def getKpiElement(formula, prefixAlias = '') {
    def regexp = ~/(\([?:\w|\s|\+|\-|\*|\\/]*\))/
    char autoGeneratedAlias = 'A'
    def elements = [:]
    def matcher = regexp.matcher(formula)
    while (matcher.find()) {
        def element = matcher.group(0)
        if (NumberUtils.isNumber(element.replace('(', '').replace(')', ''))) {
            println("formula: $formula, element: $element is a number will be skipped!")
        } else {
            if (!elements.containsKey(element)) {
                elements << [(element): prefixAlias + '_' + autoGeneratedAlias]
                autoGeneratedAlias++
            }
        }
    }
    def aggElement = formula
    def elementList = []
    def elementAliasList = []
    elements.each {k, v ->
        elementList << "$k as $v"
        elementAliasList << v
        aggElement = StringUtils.replace(aggElement, k.toString(), "($v)")
    }

    return [aggElement: aggElement, elementList: elementList, elementAliasList: elementAliasList]
}

private boolean isConstant(String str) {
    return str.replace('(', '').replace(')', '').split("[\\+\\-\\*\\/]").every {
        println it
        it && NumberUtils.isNumber(it)
    }
}


println isConstant('1024')

println([[id: 20, name: 1], [id: 20, name: 2], [id: 20, name: 3], [id: 21, name: 4], [id: 21, name: 5], [id: 22, name: 6]].groupBy {
    it.id
}.collect {k, v ->
    [id: k, name: v.collect {it.name}]
})

def test(t1, t2, t3) {
    return t1 + t2 + t3
}

def ttttt = [1, 2, 3]
println test(ttttt)